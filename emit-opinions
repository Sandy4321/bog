#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import sys
HERE = os.path.dirname(__file__)
sys.path.append(HERE)
import argparse
import numpy as np

from interpret import apply_interpret_options, add_interpret_options
from interpret import find_cluster_cliff

from meta import write_rankings_json, write_clusters_json, read_info_json
from munge import data_to_clusters, cluster_aware_matrix


def find_clusters(data, names, clusteriness):
    data = cluster_aware_matrix(data, names, 1)
    diagonal = np.diagonal(data)
    d_median = np.median(diagonal)
    cliff = find_cluster_cliff(data)
    threshold = d_median - clusteriness * (d_median - cliff)
    return data_to_clusters(data, threshold)


def write_opinions(output_dir, affinities, all_names, clusteriness_map):
    for pid, data in affinities.items():
        clusteriness = clusteriness_map[pid]
        #print "using clusteriness %s for %s" % (clusteriness, pid)
        names = all_names[pid]
        clusters = find_clusters(data, names, clusteriness)
        dest_dir = os.path.join(output_dir, pid)
        write_clusters_json(clusters, names, dest_dir)
        write_rankings_json(data, names, dest_dir)


def get_clustiness_map(info_dir, clusteriness_reviews, clusteriness_articles):
    info = read_info_json(info_dir)
    clusteriness_map = {}
    for pid, _, genre in info:
        if genre == 'articles':
            clusteriness_map[pid] = clusteriness_articles
        else:
            clusteriness_map[pid] = clusteriness_reviews
    return clusteriness_map


def main():
    parser = argparse.ArgumentParser()
    add_interpret_options(parser)
    parser.add_argument('-o', '--output-dir', help="write results here")
    parser.add_argument('--info-dir',
                        help="where to find info.json")
    parser.add_argument('--clusteriness-reviews', default=0.5, type=float,
                        help="how much to cluster reviews")
    parser.add_argument('--clusteriness-articles', default=0.5, type=float,
                        help="how much to cluster articles")
    args = parser.parse_args()

    affinities, all_names = apply_interpret_options(args)

    clusteriness_map = get_clustiness_map(args.info_dir,
                                          args.clusteriness_reviews,
                                          args.clusteriness_articles)

    write_opinions(args.output_dir, affinities, all_names, clusteriness_map)


main()
