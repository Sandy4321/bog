#!/usr/bin/python
import argparse
import os
import subprocess

from meta import read_info_json

HERE = os.path.dirname(__file__)

CLUSTERINESS = {
    'en': 0.75,
    'nl': 0.75,
    'gr': 0.8,
}


def read_config_file(fn):
    f = open(fn)
    rows = []
    for line in f:
        line = line.strip()
        if line and not line[0] == '#':
            rows.append(line.split())
    f.close()
    return rows


def get_commands(lang, input_dir, output_dir):
    starts = read_config_file('%s/config/%s-common' % (HERE, lang))
    for cmd in starts:
        cmd += ['-i', input_dir]

    ends = read_config_file('%s/config/%s' % (HERE, lang))
    commands = {}
    i = 0
    for s in starts:
        for e in ends:
            i += 1
            pickle = '%s/%s-%s.pickle' % (output_dir, lang, i)
            commands[pickle] = s + e + ['--save', pickle]

    return commands


def write_answers_for_lang(lang, input_dir, output_dir):
    commands = get_commands(lang, input_dir, output_dir)

    pickles = []
    for pickle, cmd in commands.items():
        print "training:  %s" % ' '.join(cmd)
        try:
            subprocess.check_call(cmd)
            pickles.append(pickle)
        except subprocess.CalledProcessError, e:
            print "failed to create %s with %s" % (pickle, e)

    cmd = ['./emit-opinions', '-o', output_dir, '--clusteriness',
           str(CLUSTERINESS[lang])]

    for p in pickles:
        cmd.extend(['-i', p])

    print "running %s" % ' '.join(cmd)
    subprocess.check_call(cmd)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input-dir', help="find testing corpus here")
    parser.add_argument('-o', '--output-dir', help="write results here")

    args = parser.parse_args()

    info = read_info_json(args.input_dir)
    langs = set(x[1] for x in info)

    for lang in langs:
        print "looking at %s" % lang
        write_answers_for_lang(lang, args.input_dir, args.output_dir)

main()
