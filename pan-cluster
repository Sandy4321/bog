#!/usr/bin/python
import argparse
import os
import sys
import subprocess
import json
import errno

from meta import read_info_json

config = {
    'en' : (
        ['-H99', '-V2', '--presynaptic-noise=0.3',],
        ['-H79', '-V3', '--presynaptic-noise=0.1',],
        ['-H119', '-V2', '--presynaptic-noise=0.3', '--reverse'],
        ['-H199', '-e10', '--presynaptic-noise=1.0'],
    ),
    'gr' : (
        ['-H99', '-V2', '--presynaptic-noise=0.3',],
        ['-H79', '-V3', '--presynaptic-noise=0.1',],
        ['-H119', '-V2', '--presynaptic-noise=0.3', '--reverse'],
        ['-H199', '-e10', '--presynaptic-noise=1.0'],
    ),
    'nl' : (
        ['-H99', '-V2', '--presynaptic-noise=0.3',],
        ['-H79', '-V3', '--presynaptic-noise=0.1',],
        ['-H119', '-V2', '--presynaptic-noise=0.3', '--reverse'],
        ['-H199', '-e10', '--presynaptic-noise=1.0'],
    ),
}


def write_answers_for_lang(lang, tasks, input_dir, output_dir):
    for i, c in enumerate(config):
        dest = os.path.join(output_dir, '%s-%s.pickle' % (lang, i))
        cmd = ['./learn-corpus', lang,
               '-C80', '-o' output_dir,
               '-i' input_dir,
               '--save', dest,
               '--batch-size', '40',
               '-l0.125',
               '--ignore-start', '10'] + config
        print "training:  %s" % ' '.join(cmd)
        subprocess.check_call(cmd)




def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input-dir', help="find testing corpus here")
    parser.add_argument('-o', '--output-dir', help="write results here")

    args = parser.parse_args()

    info = read_info_json(args.input_dir)

    lang_tasks = {}
    for subdir, lang, genre in info:
        tasks = lang_tasks.setdefault(lang, [])
        tasks.append(subdir)

    for lang, tasks in lang_tasks.items():
        write_answers_for_lang(lang, tasks, args.input_dir, args.output_dir)

main()
